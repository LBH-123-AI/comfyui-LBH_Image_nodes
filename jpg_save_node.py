import comfy
import folder_paths
from PIL import Image
import numpy as np
import os
from datetime import datetime

class JPG_Save:
    def __init__(self):
        self.output_dir = folder_paths.get_output_directory()
        self.type = "output"

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "images": ("IMAGE", {"label": "输入图像"}),
                "filename_prefix": ("STRING", {
                    "default": "%date:yyyy-MM-dd%/%date:HH-mm-ss%",
                    "label": "文件路径格式"
                })
            }
        }

    RETURN_TYPES = ()
    FUNCTION = "save_images"
    OUTPUT_NODE = True
    CATEGORY = "图像输出/基础版"

    def parse_filename(self, pattern):
        """解析动态路径模板"""
        now = datetime.now()
        replacements = {
            "%date:yyyy-MM-dd%": now.strftime("%Y-%m-%d"),
            "%date:HH-mm-ss%": now.strftime("%H-%M-%S")
        }
        for key, value in replacements.items():
            pattern = pattern.replace(key, value)
        return pattern

    def create_safe_path(self, base_dir, sub_path):
        """创建合法文件路径"""
        valid_chars = "-_.() %s%s" % (os.sep, os.sep)
        cleaned_path = ''.join(c if c.isalnum() or c in valid_chars else '_' for c in sub_path)
        full_path = os.path.join(base_dir, cleaned_path)
        os.makedirs(full_path, exist_ok=True)
        return full_path

    def save_images(self, images, filename_prefix):
        # 解析路径
        parsed_pattern = self.parse_filename(filename_prefix)
        base_dir = self.output_dir
        dir_path, file_prefix = os.path.split(parsed_pattern)
        safe_dir = self.create_safe_path(base_dir, dir_path)

        # 生成唯一文件名
        counter = 1
        while True:
            filename = f"{file_prefix}_{counter:05d}.jpg"
            full_path = os.path.join(safe_dir, filename)
            if not os.path.exists(full_path):
                break
            counter += 1

        # 保存图像（固定质量为95）
        results = []
        for image in images:
            img_data = 255.0 * image.cpu().numpy()
            img = Image.fromarray(np.clip(img_data, 0, 255).astype(np.uint8))
            
            # 添加基本元数据
            exif = img.getexif()
            exif[0x0131] = "Generated by ComfyUI"  # Software

            img.save(
                full_path,
                format="JPEG",
                quality=95,  # 固定质量值
                optimize=True,
                progressive=True,
                exif=exif
            )
            
            results.append({
                "filename": filename,
                "subfolder": os.path.relpath(safe_dir, base_dir),
                "type": self.type
            })

        return {"ui": {"images": results}}

class Advanced_JPG_Save:
    def __init__(self):
        self.output_dir = folder_paths.get_output_directory()
        self.type = "output"

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "images": ("IMAGE", {"label": "输入图像"}),
                "filename_prefix": ("STRING", {
                    "default": "%date:yyyy-MM-dd%/%date:HH-mm-ss%_seed%seed%",
                    "label": "文件路径格式"
                }),
                "quality": ("INT", {
                    "default": 95,
                    "min": 1,
                    "max": 100,
                    "step": 1,
                    "display": "slider",
                    "label": "图像质量"
                }),
                "seed": ("INT", {
                    "default": 0,
                    "label": "Seed (确保准确)"
                })
            },
            "hidden": {
                "prompt": "PROMPT",
                "extra_pnginfo": "EXTRA_PNGINFO",
            },
        }

    RETURN_TYPES = ()
    FUNCTION = "save_images"
    OUTPUT_NODE = True
    CATEGORY = "图像输出/高级版"

    def parse_filename(self, pattern, seed):
        """解析动态路径模板，确保 %seed% 被替换为实际值"""
        now = datetime.now()
        replacements = {
            "%date:yyyy-MM-dd%": now.strftime("%Y-%m-%d"),
            "%date:HH-mm-ss%": now.strftime("%H-%M-%S"),
            "%seed%": str(seed)
        }
        for key, value in replacements.items():
            pattern = pattern.replace(key, value)
        return pattern

    def create_safe_path(self, base_dir, sub_path):
        """创建合法文件路径"""
        valid_chars = "-_.() %s%s" % (os.sep, os.sep)
        cleaned_path = ''.join(c if c.isalnum() or c in valid_chars else '_' for c in sub_path)
        full_path = os.path.join(base_dir, cleaned_path)
        os.makedirs(full_path, exist_ok=True)
        return full_path

    def save_images(self, images, filename_prefix, quality, seed, prompt=None, extra_pnginfo=None, **kwargs):
        # 解析路径（文件名会包含 seed）
        parsed_pattern = self.parse_filename(filename_prefix, seed)
        base_dir = self.output_dir
        dir_path, file_prefix = os.path.split(parsed_pattern)
        safe_dir = self.create_safe_path(base_dir, dir_path)

        # 生成唯一文件名
        counter = 1
        while True:
            filename = f"{file_prefix}_{counter:05d}.jpg"
            full_path = os.path.join(safe_dir, filename)
            if not os.path.exists(full_path):
                break
            counter += 1

        # 保存图像
        results = []
        for image in images:
            img_data = 255.0 * image.cpu().numpy()
            img = Image.fromarray(np.clip(img_data, 0, 255).astype(np.uint8))
            
            # 添加元数据
            exif = img.getexif()
            exif[0x9286] = f"Seed: {seed} | Quality: {quality}"  # UserComment
            exif[0x0131] = "Generated by ComfyUI"  # Software

            img.save(
                full_path,
                format="JPEG",
                quality=quality,
                optimize=True,
                progressive=True,
                exif=exif
            )
            
            results.append({
                "filename": filename,
                "subfolder": os.path.relpath(safe_dir, base_dir),
                "type": self.type
            })

        return {"ui": {"images": results}}

NODE_CLASS_MAPPINGS = {
    "JPG_Save": JPG_Save,
    "Advanced_JPG_Save": Advanced_JPG_Save
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "JPG_Save": "保存JPG图像",
    "Advanced_JPG_Save": "高级保存JPG图像"
}